{
  "hash": "219ec418bebe0bd2af3590a2189f2a7f",
  "result": {
    "markdown": "---\ntitle: \"Conhecendo o pacote geobr\"\nauthor: \"Beatriz Milz\"\ndate: \"2023-11-22\"\nformat: \n  rladies-revealjs:\n    footer: \"Slides feitos com [Quarto](https://quarto.org/docs/presentations/revealjs/index.html) e [Quarto R-Ladies Theme](https://github.com/beatrizmilz/quarto-rladies-theme#quarto-r-ladies-theme).\"\nincremental: false\nknitr:\n  opts_chunk:\n    echo: true\n    message: false\n    warning: false\n    error: false\n    cache: true\n---\n\n\n## Pacote geobr\n\n-   O pacote **geobr** disponibiliza funções para obter diversas bases de dados **espaciais** oficiais do Brasil.\n\n-   O pacote foi desenvolvido e é mantido pela equipe do [IPEA - Instituto de Pesquisa Econômica Aplicada](https://www.ipea.gov.br/portal/).\n\n-   Você pode saber mais no repositório do pacote no GitHub: <https://ipeagit.github.io/geobr/>\n\n# Funções importantes\n\n-   `read_country()`: Delimitação do Brasil\n\n-   `read_state()`: Delimitação dos estados do Brasil\n\n-   `read_state(\"SP\")`: Delimitação de um estado específico, usando a sigla como argumento\n\n-   `read_municipality()`: Delimitação de todos os municípios do Brasil. É uma base pesada!\n\n-   `read_municipality(code_muni = 3550308)`: Delimitação de um município específico, usando o código do IBGE do município.\n\n## Consultando todas as funções disponíveis\n\n-   Função `list_geobr()`\n\n\n::: {.cell hash='slide-geobr_cache/revealjs/unnamed-chunk-1_b74fd89540804edcb68d8db08049da76'}\n::: {.cell-output-display}\n```{=html}\n<div class=\"reactable html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-8c25b94f2911f78cce9f\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-8c25b94f2911f78cce9f\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"function\":[\"`read_country`\",\"`read_region`\",\"`read_state`\",\"`read_meso_region`\",\"`read_micro_region`\",\"`read_intermediate_region`\",\"`read_immediate_region`\",\"`read_municipality`\",\"`read_municipal_seat`\",\"`read_weighting_area`\",\"`read_census_tract`\",\"`read_statistical_grid`\",\"`read_metro_area`\",\"`read_urban_area`\",\"`read_amazon`\",\"`read_biomes`\",\"`read_conservation_units`\",\"`read_disaster_risk_area`\",\"`read_indigenous_land`\",\"`read_semiarid`\",\"`read_health_facilities`\",\"`read_health_region`\",\"`read_neighborhood`\",\"`read_schools`\",\"`read_comparable_areas`\",\"`read_urban_concentrations`\",\"`read_pop_arrangements`\"],\"geography\":[\"Country\",\"Region\",\"States\",\"Meso region\",\"Micro region\",\"Intermediate region\",\"Immediate region\",\"Municipality\",\"Municipality seats (sedes municipais)\",\"Census weighting area (área de ponderação)\",\"Census tract (setor censitário)\",\"Statistical Grid of 200 x 200 meters\",\"Metropolitan areas\",\"Urban footprints\",\"Brazil's Legal Amazon\",\"Biomes\",\"Environmental Conservation Units\",\"Disaster risk areas\",\"Indigenous lands\",\"Semi Arid region\",\"Health facilities\",\"Health regions and macro regions\",\"Neighborhood limits\",\"Schools\",\"Historically comparable municipalities, aka Areas minimas comparaveis (AMCs)\",\"Urban concentration areas (concentrações urbanas)\",\"Population arrangements (arranjos populacioanis)\"],\"source\":[\"IBGE\",\"IBGE\",\"IBGE\",\"IBGE\",\"IBGE\",\"IBGE\",\"IBGE\",\"IBGE\",\"IBGE\",\"IBGE\",\"IBGE\",\"IBGE\",\"IBGE\",\"IBGE\",\"MMA\",\"IBGE\",\"MMA\",\"CEMADEN and IBGE\",\"FUNAI\",\"IBGE\",\"CNES, DataSUS\",\"DataSUS\",\"IBGE\",\"INEP\",\"IBGE\",\"IBGE\",\"IBGE\"]},\"columns\":[{\"id\":\"function\",\"name\":\"function\",\"type\":\"character\"},{\"id\":\"geography\",\"name\":\"geography\",\"type\":\"character\"},{\"id\":\"source\",\"name\":\"source\",\"type\":\"character\"}],\"defaultPageSize\":5,\"className\":\"smaller\",\"dataKey\":\"b125dea94351ad9a9e2bfbcbd78e3c47\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n## Com o geobr, trabalhamos com dados vetoriais!\n\n-   **Pontos**: localização de uma escola, ponto de coleta, etc.\n\n-   **Linhas**: ruas/estradas/rodovias, rios, etc.\n\n-   **Polígonos**: delimitação de cidades, estados, países, etc.\n\n## Conceitos importantes: Vetor x Raster\n\n![](img/vector-raster_1644589693.jpeg){fig-align=\"center\"}\n\n::: footer\nFonte da imagem: <https://guides.lib.uw.edu/>\n:::\n\n## Usamos uma nova classe de dados: sf!\n\n[![](img/sf_horst.png){fig-align=\"center\" width=\"90%\"}](https://github.com/allisonhorst/stats-illustrations)\n\n::: footer\nFonte da imagem: <https://github.com/allisonhorst/stats-illustrations>\n:::\n\n\n## Exemplo\n\n\n::: {.cell hash='slide-geobr_cache/revealjs/unnamed-chunk-2_ddc3346d18c347415755c350c242d319'}\n\n```{.r .cell-code}\n# Carregando pacotes necessários\nlibrary(geobr)\nlibrary(sf)\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell hash='slide-geobr_cache/revealjs/unnamed-chunk-3_1f04d15ac63f800323083caba56581a6'}\n\n```{.r .cell-code}\n# Lendo os dados da delimitação dos estados brasileiros\nbrasil_ufs <- read_state(showProgress = FALSE)\n```\n:::\n\n::: {.cell hash='slide-geobr_cache/revealjs/unnamed-chunk-4_e71035df69b21889bd043e1a95e196a4'}\n\n```{.r .cell-code}\n# Classe do objeto\nclass(brasil_ufs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sf\"         \"data.frame\"\n```\n:::\n:::\n\n\n\n## Explorando o objeto\n\n\n::: {.cell hash='slide-geobr_cache/revealjs/unnamed-chunk-5_1e85e9e7fd116c52dc3fad5e7fbdc594'}\n\n```{.r .cell-code}\nglimpse(brasil_ufs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 27\nColumns: 6\n$ code_state   <dbl> 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 2…\n$ abbrev_state <chr> \"RO\", \"AC\", \"AM\", \"RR\", \"PA\", \"AP\", \"TO\", \"MA\", \"PI\", \"CE…\n$ name_state   <chr> \"Rondônia\", \"Acre\", \"Amazonas\", \"Roraima\", \"Pará\", \"Amapá…\n$ code_region  <dbl> 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, …\n$ name_region  <chr> \"Norte\", \"Norte\", \"Norte\", \"Norte\", \"Norte\", \"Norte\", \"No…\n$ geom         <MULTIPOLYGON [°]> MULTIPOLYGON (((-63.32721 -..., MULTIPOLYGON…\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"site_libs/react-18.2.0/react.min.js\"></script>\n<script src=\"site_libs/react-18.2.0/react-dom.min.js\"></script>\n<script src=\"site_libs/reactwidget-1.0.0/react-tools.js\"></script>\n<script src=\"site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<link href=\"site_libs/reactable-0.4.4/reactable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/reactable-binding-0.4.4/reactable.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}